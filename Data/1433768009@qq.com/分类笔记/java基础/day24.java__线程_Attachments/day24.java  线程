线程:
一.格式1 (优先考虑)
		1.步骤:01创建新类,继承Thread,重写run()方法
			  02创线程对象,调用start()方法,开启新线程,并执行run()方法
			  
		2.注意:如果直接调用run方法,并没有开启新线程	 
		3.特点:多线程随机切换执行
		     练习:创建两个线程,和主线程交替运行		
		4.01冻结:没有执行权
				sleep(time)
				wait()  notify()
		  02消亡:    
				 stop()     
				 run()结束
		  03阻塞状态:
			具备运行资格,但没有执行权
			
		5.Thread.currentThread():获取当前线程对象
		  线程对象.getName():获取线程名称
		  线程对象.setName(name):设置线程名称,也可以用构造函数

二.格式2 (如果已经继承其他类,就选择这个方法)
		1.步骤:
			01定义类实现Runnable接口
			02覆盖Runnable中的run方法
			03创建Runnable接口的子类对象
			04通过Thread类建立线程对象
			05将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数
			  是为了确定run方法存在的位置
			06调用Thread 类的start方法开启新线程,并调用Runnable接口子类的run方法
        2.实现与继承的区别
		    01如果已经继承其他类就不能继承Thread ,就不能实现多线程
			02实现方式避免了单继承的局限性
			03,继承Thread:线程代码存放在Thread 子类run方法中,扩展性
			   实现Runnable :线程代码存放在接口的子类的run方法中

三. 多线程的安全问题:
	     		当多条语句在操作同一个线程共享数据时,一个线程对多条语句只执行了一部分,还没有执行完,
				另一个线程参与进来执行,导致共享数据的错误
	java解决方案:
		1.同步代码块  
			01.关键字 synchronized
				synchronized (对象)//对象必须是同一个,也就是只能有一个锁
				{
					需要被同步的代码
				}
		    02.前提:有两个以上线程,必须是多个线程使用同一个锁
			03.弊端:消耗资源
			04.三明确:
					明确哪些代码是多线程运行代码
					明确共享数据
					明确多线程运行代码中操作共享数据的语句
		2.同步函数
			格式
			函数用 synchronized 修饰
			同步函数用的锁是this  
			静态方法用的锁是 类名.class 

		3.单例设计,懒汉式的锁问题----------见java文件
		4.死锁
		    同步中嵌套同步,而锁不同
          练习:写一个死锁程序
		5.锁又叫监视器
		