<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=unicode">
<title>手把手教你使用Git(window下 )</title>
    <!--mark |wiz_custom_css| for wizeditor replace it-->


<style type="text/css" id="wiz_todo_style_id" wiz_link_version="01.00.09">.wiz-todo, .wiz-todo-img {width: 16px; height: 16px; cursor: default; padding: 0 10px 0 2px; vertical-align: -10%;-webkit-user-select: none;} .wiz-todo-label { display: inline-block; padding-top: 7px; padding-bottom: 6px; line-height: 1.5;} .wiz-todo-label-checked {  color: #666;} .wiz-todo-label-unchecked {text-decoration: initial;} .wiz-todo-completed-info {padding-left: 44px; display: inline-block; } .wiz-todo-avatar { width:20px; height: 20px; vertical-align: -20%; margin-right:10px; border-radius: 2px;} .wiz-todo-account, .wiz-todo-dt { color: #666; }</style><style id="wiz_custom_css">html, body {            font-size: 15px;        }        body {            font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;            line-height: 1.6;            margin: 0;            padding: 20px 15px;            padding: 1.33rem 1rem;        }        h1, h2, h3, h4, h5, h6 {            margin: 20px 0 10px;            margin: 1.33rem 0 0.667rem;            padding: 0;            font-weight: bold;        }        h1 {            font-size: 21px;            font-size: 1.4rem;        }        h2 {            font-size: 20px;            font-size: 1.33rem;        }        h3 {            font-size: 18px;            font-size: 1.2rem;        }        h4 {            font-size: 17px;            font-size: 1.13rem;        }        h5 {            font-size: 15px;            font-size: 1rem;        }        h6 {            font-size: 15px;            font-size: 1rem;            color: #777777;            margin: 1rem 0;        }        div, p, ul, ol, dl, li {            margin: 0;        }        blockquote, table, pre, code {            margin: 8px 0;        }        ul, ol {            padding-left: 32px;            padding-left: 2.13rem;        }        blockquote {            padding: 0 12px;            padding: 0 0.8rem;        }        blockquote > :first-child {            margin-top: 0;        }        blockquote > :last-child {            margin-bottom: 0;        }        img {            border: 0;            max-width: 100%;            height: auto !important;            margin: 2px 0;        }        table {            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        td, th {            padding: 4px 8px;            border-collapse: collapse;            border: 1px solid #bbbbbb;			        }        @media only screen and (-webkit-max-device-width: 1024px), only screen and (-o-max-device-width: 1024px), only screen and (max-device-width: 1024px), only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (-o-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3) {            html, body {                font-size: 17px;            }            body {                line-height: 1.7;                padding: 0.75rem 0.9375rem;                color: #353c47;            }            h1 {                font-size: 2.125rem;            }            h2 {                font-size: 1.875rem;            }            h3 {                font-size: 1.625rem;            }            h4 {                font-size: 1.375rem;            }            h5 {                font-size: 1.125rem;            }            h6 {                color: inherit;            }            ul, ol {                padding-left: 2.5rem;            }            blockquote {                padding: 0 0.9375rem;            }        }</style><style id="wiz_tmp_editor_style" wiz_style= "unsave">html, body {    font-size: 15px;}body {    font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;    line-height: 1.6;    color: ;    background-color: ;    margin: 0;    padding: 20px 15px;    padding: 1.33rem 1rem;}img{    max-width: 100%;}</style><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\utils.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\localize.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\core\wizEditorForPc.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\WizNote\WizTools\htmleditor\editorHelper.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///E:\我的为知\templates\WizTemplate.js" wiz_style="unsave" charset="utf-8"></script></head>

<body  style=""><div class="entry-header" style="border: 0px; padding: 0px; font-size: 13px; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', 宋体, 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);"><h1 style="border-width: 0px 0px 1px; border-bottom-style: solid; border-bottom-color: rgb(232, 232, 232); margin-top: 0px; margin-bottom: 20px; padding-bottom: 20px; font-size: 24px; font-weight: normal; line-height: 30px; font-family: 'Microsoft YaHei', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif; text-align: center;">推荐！手把手教你使用Git</h1></div><div class="entry-meta" style="border-width: 0px 0px 1px; border-bottom-style: dotted; border-bottom-color: rgb(232, 232, 232); margin-bottom: 5px; padding: 0px 0px 30px; font-size: 12px; color: rgb(153, 153, 153); font-family: 'Microsoft YaHei', 宋体, 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);"><p class="entry-meta-hide-on-mobile" style="border: 0px; margin-bottom: 5px; padding: 0px; font-size: 12px;">2014/10/26 ·&nbsp;<a href="http://blog.jobbole.com/category/it-tech/" rel="category tag" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px; text-decoration: none; color: rgb(153, 153, 153);">IT技术</a>,&nbsp;<a href="http://blog.jobbole.com/category/books/" rel="category tag" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px; text-decoration: none; color: rgb(153, 153, 153);">书籍与教程</a>&nbsp;·&nbsp;<a href="http://blog.jobbole.com/78960/#article-comment" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px; text-decoration: none; color: rgb(153, 153, 153);">25 评论&nbsp;</a>·&nbsp;<a href="http://blog.jobbole.com/tag/git/" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px; text-decoration: none; color: rgb(153, 153, 153);">Git</a></p><div class="jiathis_style" style="border: 0px; padding: 0px; font-size: 12px; clear: both;"><span class="jiathis_txt" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px; vertical-align: middle; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; float: left; line-height: 18px !important;">分享到：</span><a class="jiathis_button_tsina" title="分享到微博" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px;"><span class="jiathis_txt jtico jtico_tsina" style="border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; overflow: hidden; cursor: pointer; float: left; background-image: url(&quot;&quot;); padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -96px; background-repeat: no-repeat no-repeat;"></span></a><a class="jiathis_button_weixin" title="分享到微信" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px;"><span class="jiathis_txt jtico jtico_weixin" style="border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; overflow: hidden; cursor: pointer; float: left; background-image: url(&quot;&quot;); padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -1809px; background-repeat: no-repeat no-repeat;"></span></a><a class="jiathis_button_qzone" title="分享到QQ空间" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px;"><span class="jiathis_txt jtico jtico_qzone" style="border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; overflow: hidden; cursor: pointer; float: left; background-image: url(&quot;&quot;); padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -64px; background-repeat: no-repeat no-repeat;"></span></a><a class="jiathis_button_fb" title="分享到Facebook" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px;"><span class="jiathis_txt jtico jtico_fb" style="border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; overflow: hidden; cursor: pointer; float: left; background-image: url(&quot;&quot;); padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -688px; background-repeat: no-repeat no-repeat;"></span></a><a class="jiathis_button_douban" title="分享到豆瓣" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px;"><span class="jiathis_txt jtico jtico_douban" style="border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; overflow: hidden; cursor: pointer; float: left; background-image: url(&quot;&quot;); padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -560px; background-repeat: no-repeat no-repeat;"></span></a><a class="jiathis_button_readitlater" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px;"></a><a class="jiathis_button_evernote" title="分享到印象笔记" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px;"><span class="jiathis_txt jtico jtico_evernote" style="border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; overflow: hidden; cursor: pointer; float: left; background-image: url(&quot;&quot;); padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -1120px; background-repeat: no-repeat no-repeat;"></span></a><a class="jiathis_button_ydnote" title="分享到有道云笔记" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px;"><span class="jiathis_txt jtico jtico_ydnote" style="border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: 'Microsoft YaHei', arial, tahoma, 宋体, sans-serif; overflow: hidden; cursor: pointer; float: left; background-image: url(&quot;&quot;); padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important; background-position: 0px -848px; background-repeat: no-repeat no-repeat;"></span></a><a href="http://www.jiathis.com/share?uid=1745061" class="jiathis jiathis_txt jiathis_separator jtico jtico_jiathis" target="_blank" style="border: 0px; margin: 0px 5px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; text-decoration: none; color: rgb(153, 153, 153); overflow: hidden; cursor: pointer; display: block; float: left; background-image: url(&quot;&quot;); padding-left: 20px !important; height: 16px !important; line-height: 16px !important; background-position: 0px -1408px; background-repeat: no-repeat no-repeat;"></a><a class="jiathis_counter_style" style="border: 0px; margin: 0px; padding: 0px; font-size: 12px;"><span class="jiathis_button_expanded jiathis_counter jiathis_bubble_style" id="jiathis_counter_88" title="累计分享422次" style="border: 0px; margin: 0px 0px 0px -2px; padding: 0px 0px 0px 4px; font-size: 11px; vertical-align: middle; font-family: arial, helvetica, sans-serif; float: left; font-weight: bold; color: rgb(86, 86, 86); cursor: pointer; display: block; text-align: center; height: 16px; background-image: url(&quot;&quot;); line-height: 16px !important; width: 32px !important; background-position: 0px -64px; background-repeat: no-repeat no-repeat;">422</span></a></div></div><div class="entry" style="border: 0px; padding: 0px 5px; font-size: 15px; color: rgb(46, 46, 46); line-height: 1.6; word-break: break-all; font-family: 'Microsoft YaHei', 宋体, 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif; widows: 1; background-color: rgb(255, 255, 255);"><div class="copyright-area" style="border: 0px; margin-bottom: 20px; padding: 10px; font-size: 15px; background-color: rgb(240, 240, 240);">原文出处：&nbsp;<a ref="nofollow" target="_blank" href="http://www.cnblogs.com/tugenhua0707/p/4050072.html" style="border: 0px; margin: 0px; padding: 0px; font-size: 15px; text-decoration: none; color: rgb(0, 153, 204);">涂根华的博客</a>&nbsp;&nbsp;&nbsp;</div><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">一：Git是什么？</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp;Git是目前世界上最先进的分布式版本控制系统。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">二：SVN与Git的最主要的区别？</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp; SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp; Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">三：在windows上如何安装Git？</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp; msysgit是 windows版的Git,如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;<img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyr9g0xxj206u00tt8j.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&gt; Git Bash”,如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyr8oschj2071021glh.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyr6clzzj20ik0akq3e.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">安装完成后，还需要最后一步设置，在命令行输入如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyr4qsztj20hy05xt9c.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;注意：</strong>git config&nbsp; –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">四：如何操作？</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;一：创建版本库。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; 所以创建一个版本库也非常简单，如下我是D盘 –&gt; www下 目录下新建一个testgit版本库。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyr3xaogj20g207gt92.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">pwd 命令是用于显示当前的目录。</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp; 1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyr2rpcnj20en025mx9.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyr1x3lzj20h004tgm1.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;&nbsp;2. 把文件添加到版本库中。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;&nbsp;下面先看下</strong><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">demo</strong><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">如下演示：</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;&nbsp;<img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyr0wkxbj20ch028dfu.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;如果和上面一样，没有任何提示，说明已经添加成功了。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;第二步：用命令 git commit告诉Git，把文件提交到仓库。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyqz56axj20dp03djrr.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;<img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyqrg067j20d102zwen.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyqq7ts6j20h504r74x.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git diff readme.txt 如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyqnrvxgj20ds05maal.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add&nbsp; 第二步是：git commit)。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyqmcupsj20h609i402.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">二：版本回退：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">内容为33333333333333.继续执行命令如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;<img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyql1473j20cp03vdga.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;<img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyqd9m1dj20gt08ggn8.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;<img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyqc3ziwj20gs02paai.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset&nbsp; –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset&nbsp; –hard HEAD~100 即可。未回退之前的readme.txt内容如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;<img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyqavyf7j20ch04laap.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">如果想回退到上一个版本的命令如下操作：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyqa5xjfj20ct02xaad.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">再来查看下 readme.txt内容如下：通过命令cat readme.txt查看</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyq9fck2j20c402d74c.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyq6bhrlj20dc063dgk.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git reset&nbsp; –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog&nbsp; 演示如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyq5dtfrj20e603e0t5.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git reset&nbsp; –hard 6fcfc89来恢复了。演示如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyq4m3oqj20e104974t.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">可以看到 目前已经是最新的版本了。</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">三：理解工作区与暂存区的区别？</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;<strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">工作区：</strong>就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp; 版本库</strong><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">(Repository)</strong><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">：</strong>工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">我们前面说过使用Git提交文件到版本库有两步：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">我们继续使用demo来演示下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyq3ykzsj20hv06pwfi.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyq2gn7sj20d206p0t8.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">接着我们可以使用git commit一次性提交到分支上，如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyq1gpk0j20h704mdgm.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">四：Git撤销修改和删除文件操作。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">一：撤销修改：</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;&nbsp; 比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyq0rzrcj20ax03vaaa.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset&nbsp; –hard HEAD^</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyq034qhj20hs04oaam.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">可以发现，Git会告诉你，git checkout&nbsp; — file 可以丢弃工作区的修改，如下命令：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git checkout&nbsp; —&nbsp; readme.txt,如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloypz44y5j20eh03w0t4.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p><ol style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; list-style-image: initial;"><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</li></ol><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;<img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloypybh8pj20h40deq52.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">注意：</strong>命令git checkout — readme.txt 中的 — 很重要，如果没有 — 的话，那么命令变成创建分支了。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">二：删除文件。</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloypxcttej20hr0awmzc.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloypvtweyj20jj05cwf4.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">可以使用如下命令 git checkout&nbsp; — b.txt，如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyput1l8j20fh06s0tr.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">再来看看我们testgit目录，添加了3个文件了。如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyptqfr7j20kz076ab3.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">五：远程仓库。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp;第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">ssh-keygen&nbsp; -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloypq7esij20kx04pt9c.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyppfdu3j20vh0nwdl0.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">点击 Add Key，你就应该可以看到已经添加的key。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloypnrj0cj20l60ad75p.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><ol style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; list-style-image: initial;"><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">如何添加远程库？</li></ol><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; 首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloypmocbsj20u40gttbc.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">在Repository name填入<code style="border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: 15px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;">testgit</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloypm6o2gj20si0idwh4.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; 目前，在GitHub上的这个<code style="border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: 15px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;">testgit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在，我们根据GitHub的提示，在本地的<code style="border: 0px; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: 15px; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', monospace;">testgit</code>仓库下运行命令：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git remote add origin https://github.com/tugenhua0707/testgit.git</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">所有的如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloypk8b34j20hk070764.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloypjhn5ij20t40i7mzp.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">从现在起，只要本地作了提交，就可以通过如下命令：</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git push origin master</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">2. 如何从远程库克隆？</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">上面我们了解了先有本地库，后有远程库时候，如何关联远程库。</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">首先，登录github，创建一个新的仓库，名字叫testgit2.如下：</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyphv15sj20t10gs775.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">如下，我们看到：</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloypexzvuj20ss0dgabs.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloypec5t0j20hp03jwf6.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">接着在我本地目录下 生成testgit2目录了，如下所示：</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloypdbpwnj20jt05hmxr.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">六：创建与合并分支。</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">在 &nbsp;版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">首先，我们来创建dev分支，然后切换到dev分支上。如下操作：</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloypab36sj20bc04nweu.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git branch dev</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git checkout dev</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyp9es90j20at0awjsq.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyp8mng3j20hm05qaav.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyp83uksj20es073gmi.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">注意到上面的<em style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">Fast-forward</em>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">合并完成后，我们可以接着删除dev分支了，操作如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyp7012nj20hv03vgm2.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">总结创建与合并分支命令如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; 查看分支：git branch</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; 创建分支：git branch name</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; 切换分支：git checkout name</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">创建+切换分支：git checkout –b name</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">合并某分支到当前分支：git merge name</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">删除分支：git branch –d name</p><ol style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; list-style-image: initial;"><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">如何解决冲突？</li></ol><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyp4jq8yj20ft0cu40a.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyp3w0l1j20g80dwmz7.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在我们需要在master分支上来合并fenzhi1，如下操作：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyp1wo2ij20hm0gddi9.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyp11x4zj20g107e3zd.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyp0aj6uj20dt0o5gph.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; 3.分支管理策略。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp; &nbsp; 通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</p><ol style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; list-style-image: initial;"><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">创建一个dev分支。</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">修改readme.txt内容。</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">添加到暂存区。</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">切换回主分支(master)。</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">合并dev分支，使用命令 git merge –no-ff&nbsp; -m “注释” dev</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">查看历史记录</li></ol><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">截图如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyoz5m31j20gr0lon0y.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">分支策略：</strong>首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">七：bug分支：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyoy0x5yj20he04m74v.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyoxn4t8j20i3058dgo.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;所以现在我可以通过创建issue-404分支来修复bug了。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyowmdooj20gp0etq55.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyov78t9j20h00c9taz.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在，我们回到dev分支上干活了。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyou5898j20bq03s0t6.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyot6ny2j20c202lmxg.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：</p><ol style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; list-style-image: initial;"><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。</li></ol><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 演示如下</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyosaj7fj20hq0cyq5t.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">八：多人协作。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。</p><ol style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; list-style-image: initial;"><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">要查看远程库的信息 使用 git remote</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">要查看远程库的详细信息 使用 git remote –v</li></ol><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">如下演示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyor8ayjj20h704pt9e.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">一：推送分支：</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 使用命令 git push origin master</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">比如我现在的github上的readme.txt代码如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyoolky9j20n00crt9x.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">本地的readme.txt代码如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyoljbdoj20bp05p74u.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyoklccxj20f105nmy8.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyojp2l7j20mi0dgdh4.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">那么一般情况下，那些分支要推送呢？</p><ol style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; list-style-image: initial;"><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">master分支是主分支，因此要时刻与远程同步。</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</li></ol><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">二：抓取分支：</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">但是我首先要把dev分支也要推送到远程去，如下</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyoilae8j20dz047jrw.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">接着进入testgit2目录，进行克隆远程的库到本地来，如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;<img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyofwtkzj20e404qdgn.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在目录下生成有如下所示：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyoerppxj20jy07475a.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout&nbsp; –b dev origin/dev</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww1.sinaimg.cn/mw690/6941baebgw1eloyodj3j4j20gq0katc9.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyocm8nlj20hz0l3jvp.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww2.sinaimg.cn/mw690/6941baebgw1eloyoblpvij20gi07ugmx.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><em style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">git pull</em>也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyoab9gfj20hy05j0tu.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">这回<em style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">git pull</em>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">我们可以先来看看readme.txt内容了。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><img alt="" src="http://ww4.sinaimg.cn/mw690/6941baebgw1eloyo7l3o6j20ef07p74y.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：<br><img alt="" src="http://ww3.sinaimg.cn/mw690/6941baebgw1eloyo5em1aj20gt0dcwgv.jpg" style="margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; display: block; clear: both;"></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">因此：多人协作工作模式一般是这样的：</p><ol style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; list-style-image: initial;"><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">首先，可以试图用git push origin branch-name推送自己的修改.</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。</li><li style="border: 0px; margin-bottom: 5px; margin-left: 30px; padding: 0px; font-size: 15px;">如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。</li></ol><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;"><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">Git</strong><strong style="border: 0px; margin: 0px; padding: 0px; font-size: 15px;">基本常用命令如下：</strong></p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; mkdir：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XX (创建一个空目录 XX指目录名)</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; pwd：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 显示当前目录的路径。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git add XX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 把xx文件添加到暂存区去。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git commit –m “XX”&nbsp; 提交文件 –m 后面的是注释。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git status&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看仓库状态</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git diff&nbsp; XX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看XX文件修改了那些内容</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看历史记录</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git reset&nbsp; –hard HEAD^ 或者 git reset&nbsp; –hard HEAD~ 回退到上一个版本</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (如果想回退到100个版本，使用git reset –hard HEAD~100 )</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; cat XX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看XX文件内容</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git reflog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看历史记录的版本号id</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git checkout — XX&nbsp; 把XX文件在工作区的修改全部撤销。</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git rm XX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 删除XX文件</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git remote add origin&nbsp;<a href="https://github.com/tugenhua0707/testgit" style="border: 0px; margin: 0px; padding: 0px; font-size: 15px; text-decoration: none; color: rgb(0, 153, 204);">https://github.com/tugenhua0707/testgit</a>&nbsp;关联一个远程库</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp;&nbsp; git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git clone&nbsp;<a href="https://github.com/tugenhua0707/testgit" style="border: 0px; margin: 0px; padding: 0px; font-size: 15px; text-decoration: none; color: rgb(0, 153, 204);">https://github.com/tugenhua0707/testgit</a>&nbsp; 从远程库中克隆</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git checkout –b dev&nbsp; 创建dev分支 并切换到dev分支上</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git branch&nbsp; 查看当前所有的分支</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git checkout master 切换回master分支</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git merge dev&nbsp; &nbsp;&nbsp;在当前的分支上合并dev分支</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git branch –d dev 删除dev分支</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git branch name&nbsp; 创建分支</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git stash list 查看所有被隐藏的文件列表</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git stash apply 恢复被隐藏的文件，但是内容不删除</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git stash drop 删除文件</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git stash pop 恢复文件的同时 也删除文件</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git remote 查看远程库的信息</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git remote –v 查看远程库的详细信息</p><p align="left" style="border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px;">&nbsp; &nbsp;git push origin master&nbsp; Git会把master分支推送到远程库对应的远程分支上</p><br><div style="color:gray"><small>来源：&nbsp;<a href="http://blog.jobbole.com/78960/">http://blog.jobbole.com/78960/</a></small></div></div></body></html>